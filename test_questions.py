# Sets of Questions per Category

easy_questions = [
['What is the correct syntax to output "Hello, World!" in Python?', 'print("Hello, World!")', ['console.log("Hello, World!")', 'echo("Hello, World!")', 'printf("Hello, World!")', 'print("Hello, World!")']],
['What is the correct syntax to define a function in Python?', 'def function_name():', ['function function_name() {', 'function_name {', 'def function_name():', 'function function_name():']],
['What is the correct syntax to create a for loop in Python?', 'for i in range(10):', ['for (i = 0; i < 10; i++) {', 'foreach i in range(10) {', 'for i in range(10)', 'for i in range(10):']],
['What is the correct syntax to create a dictionary in Python?', 'my_dict = {key: value}', ['my_dict = (key: value)', 'my_dict = key -> value', 'my_dict = [key: value]', 'my_dict = {key: value}']],
['What is the correct syntax to access an element in a list in Python?', 'my_list[index]', ['my_list{index}', 'my_list.index', 'my_list[index]', 'my_list(index)']],
['What is the correct syntax to import a module in Python?', 'import module', ['using module', 'import module', '#include <module>', 'require "module"']],
['What is the correct syntax to create a class in Python?', 'class MyClass:', ['function MyClass() {', 'MyClass = class', 'class MyClass:', 'class MyClass {']],
['What is the correct syntax to raise an exception in Python?', 'raise Exception("message")', ['abort("message")', 'exit("message")', 'throw Exception("message")', 'raise Exception("message")']],
['What is the correct syntax to create a while loop in Python?', 'while condition:', ['while condition {', 'while (condition) {', 'while condition:', 'do {']],
['What is the correct syntax to create a list in Python?', 'my_list = [element1, element2, element3]', ['my_list = element1, element2, element3', 'my_list = (element1, element2, element3)', 'my_list = {element1, element2, element3}', 'my_list = [element1, element2, element3]']],
]

medium_questions = [
['What is a decorator in Python?', 'A function that takes another function and extends the behavior of the latter function without explicitly modifying its code.', ['A function that takes another function and explicitly modifies its code.', 'A function that takes another function and extends the behavior of the latter function without explicitly modifying its code.', 'A function that takes another function and returns a modified version of the latter function.', 'A function that takes another function and returns a modified version of the former function.']],
['What is the correct syntax to access the value of a key in a dictionary in Python?', 'my_dict[key]', ['my_dict.key', 'my_dict{key}', 'my_dict(key)', 'my_dict[key]']],
['What is the correct syntax to delete an element from a list in Python?', 'del my_list[index]', ['my_list.delete(index)', 'my_list - index', 'my_list.remove(index)', 'del my_list[index]']],
['What is the correct syntax to create a lambda function in Python?', 'lambda arguments: expression', ['def lambda(arguments): expression', 'lambda = lambda(arguments): expression', 'function lambda(arguments) { return expression }', 'lambda arguments: expression']],
['What is the correct syntax to create a set in Python?', 'my_set = {element1, element2, element3}', ['my_set = [element1, element2, element3]', 'my_set = (element1, element2, element3)', 'my_set = {element1, element2, element3}', 'my_set = element1, element2, element3']],
['What is the correct syntax to test if an object is an instance of a particular class in Python?', 'isinstance(obj, class)', ['typeof(obj) == class', 'obj instanceof class', 'obj.instanceof(class)', 'isinstance(obj, class)']],
['What is the correct syntax to create a try-except block in Python?', 'try:\n # code\nexcept Exception:\n # exception handling', ['try {\n # code\n} catch (Exception) {\n # exception handling\n}', 'try {\n # code\n} except {\n # exception handling\n}', 'try:\n # code\nfinally:\n # exception handling', 'try:\n # code\nexcept Exception:\n # exception handling']],
['What is the correct syntax to create a list comprehension in Python?', '[expression for item in list]', ['{expression for item in list}', '(expression for item in list)', '[expression | item in list]', '[expression for item in list]']]
]

hard_questions = [
['What is the key difference between a shallow copy and a deep copy in Python?', 'A deep copy creates a new object with a new memory address, while a shallow copy creates a new object that points to the original object.', ['A deep copy is faster than a shallow copy', 'A shallow copy creates a new object with a new memory address, while a deep copy creates a new object that points to the original object.', 'A deep copy can only copy one level of an object, while a shallow copy can copy multiple levels', 'A deep copy creates a new object with a new memory address, while a shallow copy creates a new object that points to the original object.']],
['What is the purpose of the "yield" keyword in Python?', 'It is used to create a generator function that returns a generator object that can be used to execute the function body on demand.', ['It is used to create a function that returns a value', 'It is used to create a function that returns multiple values', 'It is used to create a generator function that returns a generator object that can be used to execute the function body on demand.', 'It is used to create a function that never returns a value']],
['What is the key difference between a dynamic programming and a divide-and-conquer algorithm?', 'Dynamic programming algorithms are typically used to solve optimization problems, while divide-and-conquer algorithms are used to solve problems by dividing them into smaller subproblems.', ['Dynamic programming algorithms are typically used to solve optimization problems, while divide-and-conquer algorithms are used to solve problems by dividing them into smaller subproblems.', 'Dynamic programming algorithms are used to solve problems by dividing them into smaller subproblems, while divide-and-conquer algorithms are used to solve optimization problems.', 'Dynamic programming algorithms are typically more efficient than divide-and-conquer algorithms', 'Dynamic programming algorithms are typically less efficient than divide-and-conquer algorithms']],
['What is the purpose of the "async" and "await" keywords in Python?', 'The "async" keyword is used to define an async function, and the "await" keyword is used to wait for the result of an async function.', ['The "async" keyword is used to define an async function, and the "await" keyword is used to wait for the result of an async function.', 'The "async" keyword is used to define a function that can be called asynchronously, and the "await" keyword is used to execute the function asynchronously.', 'The "async" keyword is used to define a function that can be called asynchronously, and the "await" keyword is used to wait for the result of the function.', 'The "async" keyword is used to define a function that can be executed asynchronously, and the "await" keyword is used to execute the function.']],
['What is the primary benefit of using a decorator in Python?', 'It allows you to modify the behavior of a function without directly changing the function code.', ['It allows you to define a function inside another function', 'It allows you to execute a function at the same time that it is defined', 'It allows you to modify the behavior of a function without directly changing the function code.', 'It allows you to define a function with a variable number of arguments']],
['What is the purpose of the "self" parameter in a Python class method?', 'It is used to refer to the instance of the class that the method is being called on.', ['It is used to pass a reference to the class itself', 'It is used to specify the return type of the method', 'It is used to define a default value for the method', 'It is used to refer to the instance of the class that the method is being called on.']]
]

# for question in easy_questions:
# random.shuffle(question[2])